{"/home/travis/build/npmtest/node-npmtest-follow/test.js":"/* istanbul instrument in package npmtest_follow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-follow/lib.npmtest_follow.js":"/* istanbul instrument in package npmtest_follow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_follow = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_follow = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-follow/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-follow && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_follow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_follow\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_follow.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_follow.rollup.js'] =\n            local.assetsDict['/assets.npmtest_follow.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_follow.__dirname + '/lib.npmtest_follow.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/api.js":"// The changes_couchdb API\n//\n// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar feed = require('./lib/feed')\n  , stream = require('./lib/stream')\n\nfunction follow_feed(opts, cb) {\n  var ch_feed = new feed.Feed(opts);\n  ch_feed.on('error' , function(er) { return cb && cb.call(ch_feed, er) });\n  ch_feed.on('change', function(ch) { return cb && cb.call(ch_feed, null, ch) });\n\n  // Give the caller a chance to hook into any events.\n  process.nextTick(function() {\n    ch_feed.follow();\n  })\n\n  return ch_feed;\n}\n\nmodule.exports = follow_feed;\nmodule.exports.Feed = feed.Feed;\nmodule.exports.Changes = stream.Changes\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/lib/feed.js":"// Core routines for event emitters\n//\n// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar lib = require('../lib')\n  , util = require('util')\n  , events = require('events')\n  , request = require('request')\n  , Changes = require('./stream').Changes\n  , querystring = require('querystring')\n\n// Use the library timeout functions, primarily so the test suite can catch errors.\nvar setTimeout = lib.setTimeout\n  , clearTimeout = lib.clearTimeout\n\nvar DEFAULT_HEARTBEAT = 30000;\nvar HEARTBEAT_TIMEOUT_COEFFICIENT = 1.25; // E.g. heartbeat 1000ms would trigger a timeout after 1250ms of no heartbeat.\nvar DEFAULT_MAX_RETRY_SECONDS     = 60 * 60;\nvar INITIAL_RETRY_DELAY           = 1000;\nvar RESPONSE_GRACE_TIME           = 5000;\n\nvar FEED_PARAMETERS   = ['since', 'limit', 'feed', 'heartbeat', 'filter', 'include_docs', 'view', 'style', 'conflicts', 'attachments', 'att_encoding_info'];\n\nvar EventEmitter = events.EventEmitter2 || events.EventEmitter;\n\n\nutil.inherits(Feed, EventEmitter);\nfunction Feed (opts) {\n  var self = this;\n  EventEmitter.call(self);\n\n  opts = opts || {}\n\n  self.feed = 'continuous';\n  self.heartbeat         = opts.heartbeat || DEFAULT_HEARTBEAT;\n  self.max_retry_seconds = opts.max_retry_seconds || DEFAULT_MAX_RETRY_SECONDS;\n  self.inactivity_ms = null;\n  self.initial_retry_delay = opts.initial_retry_delay || INITIAL_RETRY_DELAY;\n  self.response_grace_time = opts.response_grace_time || RESPONSE_GRACE_TIME;\n\n  self.headers = {};\n  self.request = opts.request || {} // Extra options for potentially future versions of request. The caller can supply them.\n\n  self.since = 0;\n  self.is_paused = false\n  self.caught_up = false\n  self.retry_delay = self.initial_retry_delay;\n\n  self.query_params = {}; // Extra `req.query` values for filter functions\n\n  if(typeof opts === 'string')\n    opts = {'db': opts};\n\n  Object.keys(opts).forEach(function(key) {\n    if (typeof self[key] !== 'function')\n      self[key] = opts[key];\n  })\n\n  self.pending = { request     : null\n                 , activity_at : null\n                 };\n} // Feed\n\nFeed.prototype.start =\nFeed.prototype.follow = function follow_feed() {\n  var self = this;\n\n  self.db = self.db || self.url || self.uri\n  delete self.url\n  delete self.uri\n\n  if(!self.db)\n    throw new Error('Database URL required');\n\n  if (self.db.match(/\\/_db_updates$/))\n    self.is_db_updates = true;\n\n  if(self.is_db_updates)\n    delete self.since;\n\n  if(self.feed !== 'continuous' && self.feed !== 'longpoll')\n    throw new Error('The only valid feed options are \"continuous\" and \"longpoll\"');\n\n  if(typeof self.heartbeat !== 'number')\n    throw new Error('Required \"heartbeat\" value');\n\n  self.log = lib.log4js.getLogger(self.db);\n  self.log.setLevel(process.env.follow_log_level || \"info\");\n\n  self.emit('start');\n  return self.confirm();\n}\n\nFeed.prototype.confirm = function confirm_feed() {\n  var self = this;\n\n  self.db_safe = lib.scrub_creds(self.db);\n\n  var endpoint = self.is_db_updates ? 'server' : 'database';\n\n  self.log.debug('Checking ' + endpoint + ': ' + self.db_safe);\n\n  var confirm_timeout = self.heartbeat * 3; // Give it time to look up the name, connect, etc.\n  var timeout_id = setTimeout(function() {\n    return self.die(new Error('Timeout confirming ' + endpoint + ': ' + self.db_safe));\n  }, confirm_timeout);\n\n  var headers = lib.JP(lib.JS(self.headers));\n  headers.accept = 'application/json';\n\n  var uri = self.is_db_updates ? self.db.replace(/\\/_db_updates$/, '') : self.db;\n  var req = {'uri':uri, 'headers':headers}\n  Object.keys(self.request).forEach(function(key) {\n    req[key] = self.request[key];\n  })\n\n  req = request(req, db_response)\n  self.emit('confirm_request', req)\n\n  function db_response(er, resp, body) {\n    clearTimeout(timeout_id);\n\n    if(er)\n      return self.die(er);\n\n    var db;\n    try {\n      db = JSON.parse(body)\n    } catch(json_er) {\n      return self.emit('error', json_er)\n    }\n\n    if(!self.is_db_updates && !self.dead && (!db.db_name || !db.instance_start_time))\n      return self.emit('error', new Error('Bad DB response: ' + body));\n\n    if(self.is_db_updates && !self.dead && !db.couchdb)\n      return self.emit('error', new Error('Bad server response: ' + body));\n\n    if (!self.is_db_updates)\n      self.original_db_seq = db.update_seq\n\n    self.log.debug('Confirmed ' + endpoint + ': ' + self.db_safe);\n    self.emit('confirm', db);\n\n    if(self.since == 'now') {\n      self.log.debug('Query since \"now\" is the same as query since -1')\n      self.since = -1\n    }\n\n    if(self.since == -1) {\n      self.log.debug('Query since '+self.since+' will start at ' + db.update_seq)\n      self.since = db.update_seq\n    } else if(self.since < 0) {\n      if(isNaN(db.update_seq))\n        return self.emit('error', new Error('DB requires specific id in \"since\"'));\n\n      self.log.debug('Query since '+self.since+' will start at ' + (db.update_seq + self.since + 1))\n      self.since = db.update_seq + self.since + 1\n    }\n\n    // If the next change would come after the current update_seq, just fake a catchup event now.\n    if(self.original_db_seq == self.since) {\n      self.caught_up = true\n      self.emit('catchup', db.update_seq)\n    }\n\n    return self.query();\n  }\n}\n\nFeed.prototype.query = function query_feed() {\n  var self = this;\n\n  var query_params = JSON.parse(JSON.stringify(self.query_params));\n\n  FEED_PARAMETERS.forEach(function(key) {\n    if(key in self)\n      query_params[key] = self[key];\n  })\n\n  if(typeof query_params.filter !== 'string')\n    delete query_params.filter;\n\n  if(typeof self.filter === 'function' && !query_params.include_docs) {\n    self.log.debug('Enabling include_docs for client-side filter');\n    query_params.include_docs = true;\n  }\n\n  // Limit the response size for longpoll.\n  var poll_size = 100;\n  if(query_params.feed == 'longpoll' && (!query_params.limit || query_params.limit > poll_size))\n    query_params.limit = poll_size;\n\n  var feed_url = self.db + (self.is_db_updates ? '' : '/_changes') + '?' + querystring.stringify(query_params);\n\n  self.headers.accept = self.headers.accept || 'application/json';\n  var req = { method : 'GET'\n            , uri    : feed_url\n            , headers: self.headers\n            , encoding: 'utf-8'\n            }\n\n  req.changes_query = query_params;\n  Object.keys(self.request).forEach(function(key) {\n    req[key] = self.request[key];\n  })\n\n  var now = new Date\n    , feed_ts = lib.JDUP(now)\n    , feed_id = process.env.follow_debug ? feed_ts.match(/\\.(\\d\\d\\d)Z$/)[1] : feed_ts\n\n  self.log.debug('Feed query ' + feed_id + ': ' + lib.scrub_creds(feed_url))\n  var feed_request = request(req)\n\n  feed_request.on('response', function(res) {\n    self.log.debug('Remove feed from agent pool: ' + feed_id)\n    feed_request.req.socket.emit('agentRemove')\n\n    // Simulate the old onResponse option.\n    on_feed_response(null, res, res.body)\n  })\n\n  feed_request.on('error', on_feed_response)\n\n  // The response headers must arrive within one heartbeat.\n  var response_timer = setTimeout(response_timed_out, self.heartbeat + self.response_grace_time)\n    , timed_out = false\n\n  return self.emit('query', feed_request)\n\n  function response_timed_out() {\n    self.log.debug('Feed response timed out: ' + feed_id)\n    timed_out = true\n    return self.retry()\n  }\n\n  function on_feed_response(er, resp, body) {\n    clearTimeout(response_timer)\n\n    if((resp !== undefined && resp.body) || body)\n      return self.die(new Error('Cannot handle a body in the feed response: ' + lib.JS(resp.body || body)))\n\n    if(timed_out) {\n      self.log.debug('Ignoring late response: ' + feed_id);\n      return destroy_response(resp);\n    }\n\n    if(er) {\n      self.log.debug('Request error ' + feed_id + ': ' + er.stack);\n      destroy_response(resp);\n      return self.retry();\n    }\n\n    if(resp.statusCode !== 200) {\n      self.log.debug('Bad changes response ' + feed_id + ': ' + resp.statusCode);\n      destroy_response(resp);\n      return self.retry();\n    }\n\n    self.log.debug('Good response: ' + feed_id);\n    self.retry_delay = self.initial_retry_delay;\n\n    self.emit('response', resp);\n\n    var changes_stream = new Changes\n    changes_stream.log = lib.log4js.getLogger('stream ' + self.db)\n    changes_stream.log.setLevel(self.log.level.levelStr)\n    changes_stream.feed = self.feed\n    feed_request.pipe(changes_stream)\n\n    changes_stream.created_at = now\n    changes_stream.id = function() { return feed_id }\n    return self.prep(changes_stream)\n  }\n}\n\nFeed.prototype.prep = function prep_request(changes_stream) {\n  var self = this;\n\n  var now = new Date;\n  self.pending.request = changes_stream;\n  self.pending.activity_at = now;\n  self.pending.wait_timer  = null;\n\n  // Just re-run the pause or resume to do the needful on changes_stream (self.pending.request).\n  if(self.is_paused)\n    self.pause()\n  else\n    self.resume()\n\n  // The inactivity timer is for time between *changes*, or time between the\n  // initial connection and the first change. Therefore it goes here.\n  self.change_at = now;\n  if(self.inactivity_ms) {\n    clearTimeout(self.inactivity_timer);\n    self.inactivity_timer = setTimeout(function() { self.on_inactivity() }, self.inactivity_ms);\n  }\n\n  changes_stream.on('heartbeat', handler_for('heartbeat'))\n  changes_stream.on('error', handler_for('error'))\n  changes_stream.on('data', handler_for('data'))\n  changes_stream.on('end', handler_for('end'))\n\n  return self.wait();\n\n  function handler_for(ev) {\n    var name = 'on_couch_' + ev;\n    var inner_handler = self[name];\n\n    return handle_confirmed_req_event;\n    function handle_confirmed_req_event() {\n      if(self.pending.request === changes_stream)\n        return inner_handler.apply(self, arguments);\n\n      if(!changes_stream.created_at)\n        return self.die(new Error(\"Received data from unknown request\")); // Pretty sure this is impossible.\n\n      var s_to_now = (new Date() - changes_stream.created_at) / 1000;\n      var s_to_req = '[no req]';\n      if(self.pending.request)\n        s_to_req = (self.pending.request.created_at - changes_stream.created_at) / 1000;\n\n      var msg = ': ' + changes_stream.id() + ' to_req=' + s_to_req + 's, to_now=' + s_to_now + 's';\n\n      if(ev == 'end' || ev == 'data' || ev == 'heartbeat') {\n        self.log.debug('Old \"' + ev + '\": ' + changes_stream.id())\n        return destroy_req(changes_stream)\n      }\n\n      self.log.warn('Old \"'+ev+'\"' + msg);\n    }\n  }\n}\n\nFeed.prototype.wait = function wait_for_event() {\n  var self = this;\n  self.emit('wait');\n\n  if(self.pending.wait_timer)\n    return self.die(new Error('wait() called but there is already a wait_timer: ' + self.pending.wait_timer));\n\n  var timeout_ms = self.heartbeat * HEARTBEAT_TIMEOUT_COEFFICIENT;\n  var req_id = self.pending.request && self.pending.request.id()\n  var msg = 'Req ' + req_id + ' timeout=' + timeout_ms;\n  if(self.inactivity_ms)\n    msg += ', inactivity=' + self.inactivity_ms;\n  msg += ': ' + self.db_safe;\n\n  self.log.debug(msg);\n  self.pending.wait_timer = setTimeout(function() { self.on_timeout() }, timeout_ms);\n}\n\nFeed.prototype.got_activity = function() {\n  var self = this\n\n  if (self.dead)\n    return\n\n  //\n  // We may not have a wait_timer so just clear it and null it out if it does\n  // exist\n  //\n  clearTimeout(self.pending.wait_timer)\n  self.pending.wait_timer = null\n  self.pending.activity_at = new Date\n}\n\n\nFeed.prototype.pause = function() {\n  var self = this\n    , was_paused = self.is_paused\n\n  // Emit pause after pausing the stream, to allow listeners to react.\n  self.is_paused = true\n  if(self.pending && self.pending.request && self.pending.request.pause)\n    self.pending.request.pause()\n  else\n    self.log.warn('No pending request to pause')\n\n  if(!was_paused)\n    self.emit('pause')\n}\n\nFeed.prototype.resume = function() {\n  var self = this\n    , was_paused = self.is_paused\n\n  // Emit resume before resuming the data feed, to allow listeners to prepare.\n  self.is_paused = false\n  if(was_paused)\n    self.emit('resume')\n\n  if(self.pending && self.pending.request && self.pending.request.resume)\n    self.pending.request.resume()\n  else\n    self.log.warn('No pending request to resume')\n}\n\n\nFeed.prototype.on_couch_heartbeat = function on_couch_heartbeat() {\n  var self = this\n\n  self.got_activity()\n  if(self.dead)\n    return self.log.debug('Skip heartbeat processing for dead feed')\n\n  self.emit('heartbeat')\n\n  if(self.dead)\n    return self.log.debug('No wait: heartbeat listener stopped this feed')\n  self.wait()\n}\n\nFeed.prototype.on_couch_data = function on_couch_data(change) {\n  var self = this;\n  self.log.debug('Data from ' + self.pending.request.id());\n\n  self.got_activity()\n  if(self.dead)\n    return self.log.debug('Skip data processing for dead feed')\n\n  // The changes stream guarantees that this data is valid JSON.\n  change = JSON.parse(change)\n\n  //self.log.debug('Object:\\n' + util.inspect(change));\n  if(!self.is_db_updates && 'last_seq' in change) {\n    self.log.warn('Stopping upon receiving a final message: ' + JSON.stringify(change))\n    var del_er = new Error('Database deleted after change: ' + change.last_seq)\n    del_er.deleted = true\n    del_er.last_seq = change.last_seq\n    return self.die(del_er)\n  }\n\n  if(!self.is_db_updates && !change.seq)\n    return self.die(new Error('Change has no .seq field: ' + JSON.stringify(change)))\n\n  self.on_change(change)\n\n  // on_change() might work its way all the way to a \"change\" event, and the listener\n  // might call .stop(), which means among other things that no more events are desired.\n  // The die() code sets a self.dead flag to indicate this.\n  if(self.dead)\n    return self.log.debug('No wait: change listener stopped this feed')\n  self.wait()\n}\n\nFeed.prototype.on_timeout = function on_timeout() {\n  var self = this;\n  if (self.dead)\n    return self.log.debug('No timeout: change listener stopped this feed');\n\n  self.log.debug('Timeout')\n\n  var now = new Date;\n  var elapsed_ms = now - self.pending.activity_at;\n\n  self.emit('timeout', {elapsed_ms:elapsed_ms, heartbeat:self.heartbeat, id:self.pending.request.id()});\n\n  /*\n  var msg = ' for timeout after ' + elapsed_ms + 'ms; heartbeat=' + self.heartbeat;\n  if(!self.pending.request.id)\n    self.log.warn('Closing req (no id) ' + msg + ' req=' + util.inspect(self.pending.request));\n  else\n    self.log.warn('Closing req ' + self.pending.request.id() + msg);\n  */\n\n  destroy_req(self.pending.request);\n  self.retry()\n}\n\nFeed.prototype.retry = function retry() {\n  var self = this;\n\n  clearTimeout(self.pending.wait_timer);\n  self.pending.wait_timer = null;\n\n  self.log.debug('Retry since=' + self.since + ' after ' + self.retry_delay + 'ms ')\n  self.emit('retry', {since:self.since, after:self.retry_delay, db:self.db_safe});\n\n  self.retry_timer = setTimeout(function() { self.query() }, self.retry_delay);\n\n  var max_retry_ms = self.max_retry_seconds * 1000;\n  self.retry_delay *= 2;\n  if(self.retry_delay > max_retry_ms)\n    self.retry_delay = max_retry_ms;\n}\n\nFeed.prototype.on_couch_end = function on_couch_end() {\n  var self = this;\n\n  self.log.debug('Changes feed ended ' + self.pending.request.id());\n  self.pending.request = null;\n  return self.retry();\n}\n\nFeed.prototype.on_couch_error = function on_couch_error(er) {\n  var self = this;\n\n  self.log.debug('Changes query eror: ' + lib.JS(er.stack));\n  return self.retry();\n}\n\nFeed.prototype.stop = function(val) {\n  var self = this\n  self.log.debug('Stop')\n\n  // Die with no errors.\n  self.die()\n  self.emit('stop', val);\n}\n\nFeed.prototype.die = function(er) {\n  var self = this;\n\n  if(er)\n    self.log.fatal('Fatal error: ' + er.stack);\n\n  // Warn code executing later that death has occured.\n  self.dead = true\n\n  clearTimeout(self.retry_timer)\n  clearTimeout(self.inactivity_timer)\n  clearTimeout(self.pending.wait_timer)\n\n  self.inactivity_timer = null\n  self.pending.wait_timer = null\n\n  var req = self.pending.request;\n  self.pending.request = null;\n  if(req) {\n    self.log.debug('Destroying req ' + req.id());\n    destroy_req(req);\n  }\n\n  if(er)\n    self.emit('error', er);\n}\n\nFeed.prototype.on_change = function on_change(change) {\n  var self = this;\n\n  if(!self.is_db_updates && !change.seq)\n    return self.die(new Error('No seq value in change: ' + lib.JS(change)));\n\n  if(!self.is_db_updates && change.seq == self.since) {\n    self.log.debug('Bad seq value ' + change.seq + ' since=' + self.since);\n    return destroy_req(self.pending.request);\n  }\n\n  if(typeof self.filter !== 'function')\n    return self.on_good_change(change);\n\n  var req = lib.JDUP({'query': self.pending.request.changes_query});\n  var filter_args;\n\n  if (self.is_db_updates) {\n    if(!change.db_name || !change.type)\n      return self.die(new Error('Internal _db_updates filter needs .db_name and .type in change ', change));\n    filter_args = [change.db_name, change.type, req];\n  } else {\n    if(!change.doc)\n      return self.die(new Error('Internal filter needs .doc in change ' + change.seq));\n\n    // Don't let the filter mutate the real data.\n    var doc = lib.JDUP(change.doc);\n    filter_args = [doc, req];\n  }\n  var result = false;\n  try {\n    result = self.filter.apply(null, filter_args);\n  } catch (er) {\n    self.log.debug('Filter error', er);\n  }\n\n  result = (result && true) || false;\n  if(result) {\n    self.log.debug('Builtin filter PASS for change: ' + change.seq);\n    return self.on_good_change(change);\n  } else {\n    self.log.debug('Builtin filter FAIL for change: ' + change.seq);\n\n    // Even with a filtered change, a \"catchup\" event might still be appropriate.\n    self.check_for_catchup(change.seq)\n  }\n}\n\nFeed.prototype.on_good_change = function on_good_change(change) {\n  var self = this;\n\n  if(self.inactivity_ms && !self.inactivity_timer)\n    return self.die(new Error('Cannot find inactivity timer during change'));\n\n  clearTimeout(self.inactivity_timer);\n  self.inactivity_timer = null;\n  if(self.inactivity_ms)\n    self.inactivity_timer = setTimeout(function() { self.on_inactivity() }, self.inactivity_ms);\n\n  self.change_at = new Date;\n\n  if(!self.is_db_updates)\n    self.since = change.seq;\n\n  self.emit('change', change);\n\n  self.check_for_catchup(change.seq)\n}\n\nFeed.prototype.check_for_catchup = function check_for_catchup(seq) {\n  var self = this\n\n  if (self.is_db_updates)\n    return\n  if(self.caught_up)\n    return\n  if(seq < self.original_db_seq)\n    return\n\n  self.caught_up = true\n  self.emit('catchup', seq)\n}\n\nFeed.prototype.on_inactivity = function on_inactivity() {\n  var self = this;\n  var now = new Date;\n  var elapsed_ms = now - self.change_at;\n  var elapsed_s  = elapsed_ms / 1000;\n\n  //\n  // Since this is actually not fatal, lets just totally reset and start a new\n  // request, JUST in case something was bad.\n  //\n  self.log.debug('Req ' + self.pending.request.id() + ' made no changes for ' + elapsed_s + 's');\n  return self.restart();\n\n}\n\nFeed.prototype.restart = function restart() {\n  var self = this\n\n  self.emit('restart')\n\n  // Kill ourselves and then start up once again\n  self.stop()\n  self.dead = false\n  self.start()\n}\n\nmodule.exports = { \"Feed\" : Feed\n                 };\n\n\n/*\n * Utilities\n */\n\nfunction destroy_req(req) {\n  if(req)\n    destroy_response(req.response)\n\n  if(req && typeof req.destroy == 'function')\n    req.destroy()\n}\n\nfunction destroy_response(response) {\n  if(!response)\n    return;\n\n  if(typeof response.abort === 'function')\n    response.abort();\n\n  if(response.connection)\n    response.connection.destroy();\n}\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/lib/index.js":"// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nexports.scrub_creds = function scrub_creds(url) {\n  return url.replace(/^(https?:\\/\\/)[^:]+:[^@]+@(.*)$/, '$1$2'); // Scrub username and password\n}\n\nexports.JP = JSON.parse;\nexports.JS = JSON.stringify;\nexports.JDUP = function(obj) { return JSON.parse(JSON.stringify(obj)) };\n\nvar timeouts = { 'setTimeout': setTimeout\n               , 'clearTimeout': clearTimeout\n               }\n\nexports.setTimeout   = function() { return timeouts.setTimeout.apply(this, arguments) }\nexports.clearTimeout = function() { return timeouts.clearTimeout.apply(this, arguments) }\nexports.timeouts = function(set, clear) {\n  timeouts.setTimeout = set\n  timeouts.clearTimeout = clear\n}\n\nvar debug = require('debug')\n\nfunction getLogger(name) {\n  return { \"trace\": noop\n         , \"debug\": debug('follow:' + name + ':debug')\n         , \"info\" : debug('follow:' + name + ':info')\n         , \"warn\" : debug('follow:' + name + ':warn')\n         , \"error\": debug('follow:' + name + ':error')\n         , \"fatal\": debug('follow:' + name + ':fatal')\n\n         , \"level\": {'level':0, 'levelStr':'noop'}\n         , \"setLevel\": noop\n         }\n}\n\nfunction noop () {}\n\nexports.log4js = { 'getLogger': getLogger }\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/lib/stream.js":"// Changes stream\n//\n// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar lib = require('../lib')\n  , util = require('util')\n  , stream = require('stream')\n  , request = require('request')\n\n// Use the library timeout functions, primarily so the test suite can catch errors.\nvar setTimeout = lib.setTimeout\n  , clearTimeout = lib.clearTimeout\n\n\nvar DEFS =\n  { 'longpoll_header': '{\"results\":['\n  , 'log_level'      : process.env.follow_log_level || 'info'\n  }\n\nmodule.exports = { 'Changes': Changes\n                 }\n\n\nutil.inherits(Changes, stream)\nfunction Changes (opts) {\n  var self = this\n  stream.call(self)\n\n  self.readable = true\n  self.writable = true\n\n  self.headers = {}\n  self.statusCode = null\n\n  opts = opts || {}\n  self.feed = opts.feed || null // \"continuous\" or \"longpoll\"\n  self.encoding = opts.encoding || 'utf8'\n\n  self.log = opts.log\n  if(!self.log) {\n    self.log = lib.log4js.getLogger('change_stream')\n    self.log.setLevel(DEFS.log_level)\n  }\n\n  self.is_sending = true\n  self.is_ending = false\n  self.is_dead = false\n\n  self.source = null\n  self.expect = null\n  self.buf = null\n  self.changes = []\n\n  self.on('pipe', function(src) {\n    if(!self.source)\n      self.source = src\n    else {\n      var er = new Error('Already have a pipe source')\n      er.source = self.source\n      self.error(er)\n    }\n  })\n}\n\n\nChanges.prototype.setHeader = function(key, val) {\n  var self = this\n  self.headers[key] = val\n}\n\n//\n// Readable stream API\n//\n\nChanges.prototype.setEncoding = function(encoding) {\n  var self = this\n  self.encoding = encoding // TODO\n}\n\n\nChanges.prototype.pause = function() {\n  var self = this\n  self.is_sending = false\n\n  if(self.source && self.source.pause)\n    self.source.pause()\n}\n\n\nChanges.prototype.resume = function() {\n  var self = this\n  self.is_sending = true\n  if(self.source && self.source.resume)\n    self.source.resume()\n  self.emit_changes()\n}\n\n//\n// Writable stream API\n//\n\nChanges.prototype.write = function(data, encoding) {\n  var self = this\n\n  data = self.normalize_data(data, encoding)\n  if(typeof data != 'string')\n    return // Looks like normalize_data emitted an error.\n\n  if(self.feed === 'longpoll')\n    return self.write_longpoll(data)\n  else if(self.feed === 'continuous')\n    return self.write_continuous(data)\n}\n\n\nChanges.prototype.write_longpoll = function(data) {\n  var self = this\n\n  if(self.buf === null)\n    self.buf = []\n\n  self.buf.push(data)\n  return true\n}\n\n\nChanges.prototype.write_continuous = function(data) {\n  var self = this\n\n  var offset, json, change\n    , buf = (self.buf || \"\") + data\n\n  self.log.debug('write: ' + util.inspect({'data':data, 'buf':buf}))\n\n  // Buf could have 0, 1, or many JSON objects in it.\n  while((offset = buf.indexOf(\"\\n\")) >= 0) {\n    json = buf.substr(0, offset);\n    buf = buf.substr(offset + 1);\n    self.log.debug('JSON: ' + util.inspect(json))\n\n    // Heartbeats (empty strings) are fine, but otherwise confirm valid JSON.\n    if(json === \"\")\n      ;\n\n    else if(json[0] !== '{')\n      return self.error(new Error('Non-object JSON data: ' + json))\n\n    else {\n      try { change = JSON.parse(json) }\n      catch (er) { return self.error(er) }\n\n      self.log.debug('Object: ' + util.inspect(change))\n      json = JSON.stringify(change)\n    }\n\n    // Change (or heartbeat) looks good.\n    self.changes.push(json)\n  }\n\n  // Remember the unused data and send all known good changes (or heartbeats). The data (or heartbeat)\n  // event listeners may call .pause() so remember the is_sending state now before calling them.\n  var was_sending = self.is_sending\n  self.buf = buf\n  self.emit_changes()\n  return was_sending\n}\n\n\nChanges.prototype.end = function(data, encoding) {\n  var self = this\n\n  self.is_ending = true\n  self.writable = false\n\n  // Always call write, even with no data, so it can fire the \"end\" event.\n  self.write(data, encoding)\n\n  if(self.feed === 'longpoll') {\n    var changes = [ DEFS.longpoll_header ].concat(self.buf).join('')\n    try { changes = JSON.parse(changes) || {} }\n    catch (er) { return self.error(er) }\n\n    if(!Array.isArray(changes.results))\n      return self.error(new Error('No \"results\" field in feed'))\n    if(self.changes.length !== 0)\n      return self.error(new Error('Changes are already queued: ' + JSON.stringify(self.changes)))\n\n    self.changes = changes.results.map(function(change) { return JSON.stringify(change) })\n    return self.emit_changes()\n  }\n\n  else if(self.feed === 'continuous') {\n    if(self.buf !== \"\")\n      self.log.debug('Unprocessed data after \"end\" called: ' + util.inspect(self.buf))\n  }\n}\n\n\nChanges.prototype.emit_changes = function() {\n  var self = this\n\n  while(self.is_sending && self.changes.length > 0) {\n    var change = self.changes.shift()\n    if(change === \"\") {\n      self.log.debug('emit: heartbeat')\n      self.emit('heartbeat')\n    }\n\n    else {\n      self.log.debug('emit: data')\n      self.emit('data', change)\n    }\n  }\n\n  if(self.is_sending && self.is_ending && self.changes.length === 0) {\n    self.is_ending = false\n    self.readable = false\n    self.log.debug('emit: end')\n    self.emit('end')\n  }\n}\n\n//\n// Readable/writable stream API\n//\n\nChanges.prototype.destroy = function() {\n  var self = this\n  self.log.debug('destroy')\n\n  self.is_dead = true\n  self.is_ending = false\n  self.is_sending = false\n\n  if(self.source && typeof self.source.abort == 'function')\n    return self.source.abort()\n\n  if(self.source && typeof self.source.destroy === 'function')\n    self.source.destroy()\n\n  // Often the source is from the request package, so destroy its response object.\n  if(self.source && self.source.__isRequestRequest && self.source.response\n  && typeof self.source.response.destroy === 'function')\n    self.source.response.destroy()\n}\n\n\nChanges.prototype.destroySoon = function() {\n  var self = this\n  throw new Error('not implemented')\n  //return self.request.destroySoon()\n}\n\n//\n// Internal implementation\n//\n\nChanges.prototype.normalize_data = function(data, encoding) {\n  var self = this\n\n  if(data instanceof Buffer)\n    data = data.toString(encoding)\n  else if(typeof data === 'undefined' && typeof encoding === 'undefined')\n    data = \"\"\n\n  if(typeof data != 'string')\n    return self.error(new Error('Not a string or Buffer: ' + util.inspect(data)))\n\n  if(self.feed !== 'continuous' && self.feed !== 'longpoll')\n    return self.error(new Error('Must set .feed to \"continuous\" or \"longpoll\" before writing data'))\n\n  if(self.expect === null)\n    self.expect = (self.feed == 'longpoll')\n                    ? DEFS.longpoll_header\n                    : \"\"\n\n  var prefix = data.substr(0, self.expect.length)\n  data = data.substr(prefix.length)\n\n  var expected_part = self.expect.substr(0, prefix.length)\n    , expected_remainder = self.expect.substr(expected_part.length)\n\n  if(prefix !== expected_part)\n    return self.error(new Error('Prefix not expected '+util.inspect(expected_part)+': ' + util.inspect(prefix)))\n\n  self.expect = expected_remainder\n  return data\n}\n\n\nChanges.prototype.error = function(er) {\n  var self = this\n\n  self.readable = false\n  self.writable = false\n  self.emit('error', er)\n\n  // The write() method sometimes returns this value, so if there was an error, make write() return false.\n  return false\n}\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/cli.js":"#!/usr/bin/env node\n// The follow command-line interface.\n//\n// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar lib = require('./lib')\n  , couch_changes = require('./api')\n  ;\n\nfunction puts(str) {\n  process.stdout.write(str + \"\\n\");\n}\n\nfunction main() {\n  var db = require.isBrowser ? (process.env.db || '/_users') : process.argv[2];\n  puts('Watching: ' + db);\n\n  var feed = new couch_changes.Feed();\n  feed.db = db;\n  feed.since = (process.env.since === 'now') ? 'now' : parseInt(process.env.since || '0');\n\n  feed.heartbeat = (process.env.heartbeat || '3000').replace(/s$/, '000');\n  feed.heartbeat = parseInt(feed.heartbeat);\n\n  if(require.isBrowser)\n    feed.feed = 'longpoll';\n  if(process.env.host)\n    feed.headers.host = process.env.host;\n  if(process.env.inactivity)\n    feed.inactivity_ms = parseInt(process.env.inactivity);\n  if(process.env.limit)\n    feed.limit = parseInt(process.env.limit);\n\n  feed.query_params.pid = process.pid;\n  feed.filter = process.env.filter || example_filter;\n  function example_filter(doc, req) {\n    // This is a local filter. It runs on the client side.\n    var label = 'Filter ' + (req.query.pid || '::');\n\n    if(process.env.show_doc)\n      console.log(label + ' doc: ' + JSON.stringify(doc));\n    if(process.env.show_req)\n      console.log(label + ' for ' + doc._id + ' req: ' + JSON.stringify(req));\n    return true;\n  }\n\n  feed.on('confirm', function() {\n    puts('Database confirmed: ' + db);\n  })\n\n  feed.on('change', function(change) {\n    puts('Change:' + JSON.stringify(change));\n  })\n\n  feed.on('timeout', function(state) {\n    var seconds = state.elapsed_ms / 1000;\n    var hb = state.heartbeat / 1000;\n    puts('Timeout after ' + seconds + 's inactive, heartbeat=' + hb + 's');\n  })\n\n  feed.on('retry', function(state) {\n    if(require.isBrowser)\n      puts('Long polling since ' + state.since);\n    else\n      puts('Retry since ' + state.since + ' after ' + state.after + 'ms');\n  })\n\n  feed.on('response', function() {\n    puts('Streaming response:');\n  })\n\n  feed.on('error', function(er) {\n    //console.error(er);\n    console.error('Changes error ============\\n' + er.stack);\n    setTimeout(function() { process.exit(0) }, 100);\n  })\n\n  process.on('uncaughtException', function(er) {\n    puts('========= UNCAUGHT EXCEPTION; This is bad');\n    puts(er.stack);\n    setTimeout(function() { process.exit(1) }, 100);\n  })\n\n  feed.follow();\n}\n\nexports.main = main;\nif(!require.isBrowser && process.argv[1] == module.filename)\n  main();\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/eventemitter2.js":"\n;!function(exports, undefined) {\n\n  var isArray = Array.isArray;\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = new Object;\n  }\n\n  function configure(conf) {\n\n    if (conf) {\n      this.wildcard = conf.wildcard;\n      this.delimiter = conf.delimiter || '.';\n\n      if (this.wildcard) {\n        this.listenerTree = new Object;\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = new Object;\n    configure.call(this, conf);\n  }\n\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return;\n    }\n\n    var listeners;\n\n    if (i === type.length && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return tree;\n      } else {\n        for (var leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return tree;\n      }\n    }\n\n    if (type[i] === '*' || tree[type[i]]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (type[i] === '*') {\n        for (var branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = searchListenerTree(handlers, type, tree[branch], i+1);\n          }\n        }\n        return listeners;\n      }\n\n      listeners = searchListenerTree(handlers, type, tree[type[i]], i+1);\n    }\n\n\n    if (tree['*']) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, tree['*'], i+1);\n    }\n\n    return listeners;\n  };\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = new Object;\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  };\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(null, arguments);\n    };\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener') {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n      \n      if (!this._all && \n        !this._events.error && \n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return true;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m;\n        if (this._events.maxListeners !== undefined) {\n          m = this._events.maxListeners;\n        } else {\n          m = defaultMaxListeners;\n        }\n\n        if (m && m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers;\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leaf = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      if('undefined' === typeof leaf) { return this; }\n      handlers = leaf._listeners;\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n    }\n\n    if (isArray(handlers)) {\n\n      var position = -1;\n\n      for (var i = 0, length = handlers.length; i < length; i++) {\n        if (handlers[i] === listener ||\n          (handlers[i].listener && handlers[i].listener === listener) ||\n          (handlers[i]._origin && handlers[i]._origin === listener)) {\n          position = i;\n          break;\n        }\n      }\n\n      if (position < 0) {\n        return this;\n      }\n\n      if(this.wildcard) {\n        leaf._listeners.splice(position, 1)\n      }\n      else {\n        this._events[type].splice(position, 1);\n      }\n\n      if (handlers.length === 0) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n    else if (handlers === listener ||\n      (handlers.listener && handlers.listener === listener) ||\n      (handlers._origin && handlers._origin === listener)) {\n      if(this.wildcard) {\n        delete leaf._listeners;\n      }\n      else {\n        delete this._events[type];\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leaf = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      if('undefined' === typeof leaf) { return this; }\n      leaf._listeners = null;\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  exports.EventEmitter2 = EventEmitter;\n\n}(typeof exports === 'undefined' ? window : exports);\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/export.js":"#!/usr/bin/env node\n// Export Follow in browser-friendly format.\n//\n// Copyright 2011 Jason Smith, Jarrett Cruger and contributors\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar fs = require('fs')\n  , path = require('path')\n  ;\n\nif(process.argv[1] === module.filename) {\n  var source = process.argv[2]\n    , dest   = process.argv[3]\n    ;\n\n  if(!source || !dest)\n    throw new Error(\"usage: browser-export.js <source> <target>\");\n\n  install(source, dest, function(er) {\n    if(er) throw er;\n  });\n}\n\nfunction install(filename, target, callback) {\n  //console.log('Exporting: ' + filename);\n  fs.readFile(filename, null, function(er, content) {\n    if(er && er.errno) er = new Error(er.stack); // Make a better stack trace.\n    if(er) return callback(er);\n\n    // Strip the shebang.\n    content = content.toString('utf8');\n    var content_lines = content.split(/\\n/);\n    content_lines[0] = content_lines[0].replace(/^(#!.*)$/, '// $1');\n\n    // TODO\n    // content_lines.join('\\n'), maybe new Buffer of that\n\n    //Convert the Node module (CommonJS) to RequireJS.\n    var require_re = /\\brequire\\(['\"]([\\w\\d\\-_\\/\\.]+?)['\"]\\)/g;\n\n    // No idea why I'm doing this but it's cool.\n    var match, dependencies = {};\n    while(match = require_re.exec(content))\n      dependencies[ match[1] ] = true;\n    dependencies = Object.keys(dependencies);\n    dependencies.forEach(function(dep) {\n      //console.log('  depends: ' + dep);\n    })\n\n    // In order to keep the error message line numbers correct, this makes an ugly final file.\n    content = [ 'require.def(function(require, exports, module) {'\n              //, 'var module = {};'\n              //, 'var exports = {};'\n              //, 'module.exports = exports;'\n              , ''\n              , content_lines.join('\\n')\n              , '; return(module.exports);'\n              , '}); // define'\n              ].join('');\n    //content = new Buffer(content);\n\n    fs.writeFile(target, content, 'utf8', function(er) {\n      if(er) return callback(er);\n      return callback();\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/log4js.js":"// log4js stub\n//\n\ndefine(['querystring'], function(querystring) {\n  function noop() {};\n  function trace(str) { return console.trace(str) }\n  function log(str) { return console.log(str) }\n\n  function is_verbose() {\n    return !! querystring.parse(window.location.search).verbose;\n  }\n\n  function con(str) {\n    var con = jQuery('#con');\n    var html = con.html();\n    con.html(html + str + \"<br>\");\n  }\n\n  function debug(str) {\n    if(is_verbose())\n      con(str);\n    return console.debug(str);\n  }\n\n  function out(str) {\n    con(str);\n    log(str);\n  }\n\n  var err = out;\n\n  var noops = { \"trace\": trace\n              , \"debug\": debug\n              , \"info\" : out\n              , \"warn\" : err\n              , \"error\": err\n              , \"fatal\": err\n\n              , \"setLevel\": noop\n              }\n\n  return function() {\n    return { 'getLogger': function() { return noops }\n           }\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/main.js":"window.process = { env: {} };\n\nif(!Object.keys)\n  Object.keys = function(o){\n    if(typeof o !== 'object')\n      throw new Error('Object.keys called on non-object: ' + JSON.stringify(o));\n    var ret=[], p;\n    for (p in o)\n      if(Object.prototype.hasOwnProperty.call(o,p))\n        ret.push(p);\n    return ret;\n  }\n\nif(!Array.isArray)\n  Array.isArray = function(o) {\n    return Object.prototype.toString.call(o) === '[object Array]';\n  }\n\nif(!Array.prototype.forEach)\n  Array.prototype.forEach = function(callback) {\n    var i, len = this.length;\n    for(var i = 0; i < len; i++)\n      callback(this[i], i, this);\n  }\n\nif(!Array.prototype.reduce)\n  Array.prototype.reduce = function(callback, state) {\n    var i, len = this.length;\n    for(i = 0; i < len; i++)\n      state = callback(state, this[i]);\n    return state;\n  }\n\nif(!Array.prototype.filter)\n  Array.prototype.filter = function(pred) {\n    var i, len = this.length, result = [];\n    for(i = 0; i < len; i++)\n      if(!! pred(this[i]))\n        result.push(this[i]);\n    return result;\n  }\n\nif(!Array.prototype.map)\n  Array.prototype.map = function(func) {\n    var i, len = this.length, result = [];\n    for(i = 0; i < len; i++)\n      result.push(func(this[i], i, this));\n    return result;\n  }\n\n\nif(!window.console)\n  window.console = {};\n\n; ['trace', 'debug', 'log', 'info', 'warn', 'error', 'fatal'].forEach(function(lev) {\n  window.console[lev] = window.console[lev] || function() {};\n})\n\ndefine(['events', 'querystring', 'follow/cli'], function(events, querystring, cli) {\n  var welcome = [ 'Starting Follow.'\n                , '<a href=\"https://github.com/iriscouch/follow\">Follow Follow</a>'\n                , 'at GitHub.'\n                ];\n  jQuery('#boot').html('<p>' + welcome.join(' ') + '</p>');\n\n  // Set up some faux Node stuff.\n  events.EventEmitter = events.EventEmitter2;\n  var process = window.process = new events.EventEmitter;\n\n  process.env = querystring.parse(window.location.search.slice(1));\n\n  process.stdout = {};\n  process.stdout.write = function(x) {\n    var con = jQuery('#con');\n    con.append(x);\n  }\n\n  process.exit = function(code) {\n    if(code === 0)\n      console.log(\"'EXIT' \" + code);\n    else\n      console.error(\"'EXIT' \" + code);\n  }\n\n\n  return function() { // main()\n    console.log('Main running');\n\n    try       { cli.main() }\n    catch(er) { console.log(\"Error starting tests\"); console.log(er) }\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/querystring.js":"define([], function() {\n  var exports = {};\n\n  exports.parse = function(str) {\n    var result = {};\n\n    str = str || \"\";\n    str = str.replace(/^\\?/, \"\");\n    if(!str) return result;\n\n    var kvs = str.split('&');\n    kvs.forEach(function(pair) {\n      var both = pair.split('=');\n      result[both[0]] = both[1];\n    })\n\n    return result;\n  }\n\n  exports.stringify = function(query) {\n    var result = [];\n    for (var k in query)\n      result.push(k + '=' + encodeURIComponent(query[k]));\n    return result.join('&');\n  }\n\n  return exports;\n})\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/request.jquery.js":"(function() {\nvar define = window.define\nif(!define) define = function(deps, definer) {\n  if(!window.jQuery)\n    throw new Error(\"Can't find jQuery\");\n  return definer(window.jQuery);\n}\n\ndefine(['jquery'], function(jQuery) {\n\n//\n// request.jquery\n//\n\nvar DEFAULT_TIMEOUT = 3 * 60 * 1000; // 3 minutes\n\nfunction request(options, callback) {\n  var options_onResponse = options.onResponse; // Save this for later.\n\n  if(typeof options === 'string')\n    options = {'uri':options};\n  else\n    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.\n\n  if(options.url) {\n    options.uri = options.url;\n    delete options.url;\n  }\n\n  if(!options.uri && options.uri !== \"\")\n    throw new Error(\"options.uri is a required argument\");\n\n  if(options.json) {\n    options.body = JSON.stringify(options.json);\n    delete options.json;\n  }\n\n  if(typeof options.uri != \"string\")\n    throw new Error(\"options.uri must be a string\");\n\n  ; ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect'].forEach(function(opt) {\n    if(options[opt])\n      throw new Error(\"options.\" + opt + \" is not supported\");\n  })\n\n  options.method = options.method || 'GET';\n  options.headers = options.headers || {};\n\n  if(options.headers.host)\n    throw new Error(\"Options.headers.host is not supported\");\n\n  // onResponse is just like the callback but that is not quite what Node request does.\n  callback = callback || options_onResponse;\n\n  /*\n  // Browsers do not like this.\n  if(options.body)\n    options.headers['content-length'] = options.body.length;\n  */\n\n  var headers = {};\n  var beforeSend = function(xhr, settings) {\n    if(!options.headers.authorization && options.auth) {\n      debugger\n      options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);\n    }\n\n    for (var key in options.headers)\n      xhr.setRequestHeader(key, options.headers[key]);\n  }\n\n  // Establish a place where the callback arguments will go.\n  var result = [];\n\n  function fix_xhr(xhr) {\n    var fixed_xhr = {};\n    for (var key in xhr)\n      fixed_xhr[key] = xhr[key];\n    fixed_xhr.statusCode = xhr.status;\n    return fixed_xhr;\n  }\n\n  var onSuccess = function(data, reason, xhr) {\n    result = [null, fix_xhr(xhr), data];\n  }\n\n  var onError = function (xhr, reason, er) {\n    var body = undefined;\n\n    if(reason == 'timeout') {\n      er = er || new Error(\"Request timeout\");\n    } else if(reason == 'error') {\n      if(xhr.status > 299 && xhr.responseText.length > 0) {\n        // Looks like HTTP worked, so there is no error as far as request is concerned. Simulate a success scenario.\n        er = null;\n        body = xhr.responseText;\n      }\n    } else {\n      er = er || new Error(\"Unknown error; reason = \" + reason);\n    }\n\n    result = [er, fix_xhr(xhr), body];\n  }\n\n  var onComplete = function(xhr, reason) {\n    if(result.length === 0)\n      result = [new Error(\"Result does not exist at completion time\")];\n    return callback && callback.apply(this, result);\n  }\n\n\n  var cors_creds = !!( options.creds || options.withCredentials );\n\n  return jQuery.ajax({ 'async'      : true\n                     , 'cache'      : (options.cache || false)\n                     , 'contentType': (options.headers['content-type'] || 'application/x-www-form-urlencoded')\n                     , 'type'       : options.method\n                     , 'url'        : options.uri\n                     , 'data'       : (options.body || undefined)\n                     , 'timeout'    : (options.timeout || request.DEFAULT_TIMEOUT)\n                     , 'dataType'   : 'text'\n                     , 'processData': false\n                     , 'beforeSend' : beforeSend\n                     , 'success'    : onSuccess\n                     , 'error'      : onError\n                     , 'complete'   : onComplete\n                     , 'xhrFields'  : { 'withCredentials': cors_creds\n                                      }\n                     });\n\n};\n\nrequest.withCredentials = false;\nrequest.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;\n\nvar shortcuts = [ 'get', 'put', 'post', 'head' ];\nshortcuts.forEach(function(shortcut) {\n  var method = shortcut.toUpperCase();\n  var func   = shortcut.toLowerCase();\n\n  request[func] = function(opts) {\n    if(typeof opts === 'string')\n      opts = {'method':method, 'uri':opts};\n    else {\n      opts = JSON.parse(JSON.stringify(opts));\n      opts.method = method;\n    }\n\n    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));\n    return request.apply(this, args);\n  }\n})\n\nrequest.json = function(options, callback) {\n  options = JSON.parse(JSON.stringify(options));\n  options.headers = options.headers || {};\n  options.headers['accept'] = options.headers['accept'] || 'application/json';\n\n  if(options.method !== 'GET')\n    options.headers['content-type'] = 'application/json';\n\n  return request(options, function(er, resp, body) {\n    if(!er)\n      body = JSON.parse(body)\n    return callback && callback(er, resp, body);\n  })\n}\n\nrequest.couch = function(options, callback) {\n  return request.json(options, function(er, resp, body) {\n    if(er)\n      return callback && callback(er, resp, body);\n\n    if((resp.status < 200 || resp.status > 299) && body.error)\n      // The body is a Couch JSON object indicating the error.\n      return callback && callback(body, resp);\n\n    return callback && callback(er, resp, body);\n  })\n}\n\njQuery(document).ready(function() {\n  jQuery.request = request;\n})\n\nreturn request;\n\n});\n\n//\n// Utility\n//\n\n// MIT License from http://phpjs.org/functions/base64_encode:358\nfunction b64_enc (data) {\n    // Encodes string using MIME base64 algorithm\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc=\"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    // assume utf8 data\n    // data = this.utf8_encode(data+'');\n\n    do { // pack three octets into four hexets\n        o1 = data.charCodeAt(i++);\n        o2 = data.charCodeAt(i++);\n        o3 = data.charCodeAt(i++);\n\n        bits = o1<<16 | o2<<8 | o3;\n\n        h1 = bits>>18 & 0x3f;\n        h2 = bits>>12 & 0x3f;\n        h3 = bits>>6 & 0x3f;\n        h4 = bits & 0x3f;\n\n        // use hexets to index into b64, and append result to encoded string\n        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    switch (data.length % 3) {\n        case 1:\n            enc = enc.slice(0, -2) + '==';\n        break;\n        case 2:\n            enc = enc.slice(0, -1) + '=';\n        break;\n    }\n\n    return enc;\n}\n\n})();\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/require.js":"/*\n RequireJS 0.26.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.\n Available via the MIT or new BSD license.\n see: http://github.com/jrburke/requirejs for details\n*/\nvar requirejs,require,define;\n(function(){function M(a){return $.call(a)===\"[object Function]\"}function E(a){return $.call(a)===\"[object Array]\"}function V(a,c,g){for(var e in c)if(!(e in J)&&(!(e in a)||g))a[e]=c[e];return d}function R(a,c,d){a=Error(c+\"\\nhttp://requirejs.org/docs/errors.html#\"+a);if(d)a.originalError=d;return a}function aa(a,c,d){var e,x,j;for(e=0;j=c[e];e++){j=typeof j===\"string\"?{name:j}:j;x=j.location;if(d&&(!x||x.indexOf(\"/\")!==0&&x.indexOf(\":\")===-1))x=d+\"/\"+(x||j.name);a[j.name]={name:j.name,location:x||\nj.name,main:(j.main||\"main\").replace(fa,\"\").replace(ba,\"\")}}}function W(a,d){a.holdReady?a.holdReady(d):d?a.readyWait+=1:a.ready(!0)}function ga(a){function c(b,h){var n,o;if(b&&b.charAt(0)===\".\"&&h){p.pkgs[h]?h=[h]:(h=h.split(\"/\"),h=h.slice(0,h.length-1));n=b=h.concat(b.split(\"/\"));var a;for(o=0;a=n[o];o++)if(a===\".\")n.splice(o,1),o-=1;else if(a===\"..\")if(o===1&&(n[2]===\"..\"||n[0]===\"..\"))break;else o>0&&(n.splice(o-1,2),o-=2);o=p.pkgs[n=b[0]];b=b.join(\"/\");o&&b===n+\"/\"+o.main&&(b=n)}return b}function g(b,\nh){var n=b?b.indexOf(\"!\"):-1,o=null,a=h?h.name:null,ha=b,g,l;n!==-1&&(o=b.substring(0,n),b=b.substring(n+1,b.length));o&&(o=c(o,a));b&&(g=o?(n=m[o])?n.normalize?n.normalize(b,function(b){return c(b,a)}):c(b,a):\"__$p\"+a+\"@\"+(b||\"\"):c(b,a),l=E[g],l||(l=d.toModuleUrl?d.toModuleUrl(f,g,h):f.nameToUrl(g,null,h),E[g]=l));return{prefix:o,name:g,parentMap:h,url:l,originalName:ha,fullName:o?o+\"!\"+(g||\"\"):g}}function e(){var b=!0,h=p.priorityWait,n,a;if(h){for(a=0;n=h[a];a++)if(!s[n]){b=!1;break}b&&delete p.priorityWait}return b}\nfunction x(b){return function(h){b.exports=h}}function j(b,h,n){return function(){var a=[].concat(ia.call(arguments,0)),d;if(n&&M(d=a[a.length-1]))d.__requireJsBuild=!0;a.push(h);return b.apply(null,a)}}function q(b,h){var a=j(f.require,b,h);V(a,{nameToUrl:j(f.nameToUrl,b),toUrl:j(f.toUrl,b),defined:j(f.requireDefined,b),specified:j(f.requireSpecified,b),ready:d.ready,isBrowser:d.isBrowser});if(d.paths)a.paths=d.paths;return a}function v(b){var h=b.prefix,a=b.fullName;y[a]||a in m||(h&&!K[h]&&(K[h]=\nvoid 0,(S[h]||(S[h]=[])).push(b),(t[h]||(t[h]=[])).push({onDep:function(b){if(b===h){var a,n,d,c,f,e,j=S[h];if(j)for(d=0;a=j[d];d++)if(b=a.fullName,a=g(a.originalName,a.parentMap),a=a.fullName,n=t[b]||[],c=t[a],a!==b){b in y&&(delete y[b],y[a]=!0);t[a]=c?c.concat(n):n;delete t[b];for(c=0;c<n.length;c++){e=n[c].depArray;for(f=0;f<e.length;f++)e[f]===b&&(e[f]=a)}}delete S[h]}}}),v(g(h))),f.paused.push(b))}function w(b){var h,a,c;h=b.callback;var k=b.fullName,e=[],j=b.depArray;if(h&&M(h)){if(j)for(h=\n0;h<j.length;h++)e.push(b.deps[j[h]]);if(p.catchError.define)try{a=d.execCb(k,b.callback,e,m[k])}catch(l){c=l}else a=d.execCb(k,b.callback,e,m[k]);if(k)b.cjsModule&&b.cjsModule.exports!==void 0?a=m[k]=b.cjsModule.exports:a===void 0&&b.usingExports?a=m[k]:m[k]=a}else k&&(a=m[k]=h);if(F[b.waitId])delete F[b.waitId],b.isDone=!0,f.waitCount-=1,f.waitCount===0&&(I=[]);if(c)return a=(k?g(k).url:\"\")||c.fileName||c.sourceURL,c=R(\"defineerror\",'Error evaluating module \"'+k+'\" at location \"'+a+'\":\\n'+c+\"\\nfileName:\"+\na+\"\\nlineNumber: \"+(c.lineNumber||c.line),c),c.moduleName=k,d.onError(c);if(k&&(c=t[k])){for(h=0;h<c.length;h++)c[h].onDep(k,a);delete t[k]}}function z(b,a,c,d){var b=g(b,d),k=b.name,e=b.fullName,j={},l={waitId:k||ja+Q++,depCount:0,depMax:0,prefix:b.prefix,name:k,fullName:e,deps:{},depArray:a,callback:c,onDep:function(b,a){b in l.deps||(l.deps[b]=a,l.depCount+=1,l.depCount===l.depMax&&w(l))}},i,r;if(e){if(e in m||s[e]===!0||e===\"jquery\"&&p.jQuery&&p.jQuery!==c().fn.jquery)return;y[e]=!0;s[e]=!0;e===\n\"jquery\"&&c&&T(c())}for(c=0;c<a.length;c++)if(i=a[c])i=g(i,k?b:d),r=i.fullName,a[c]=r,r===\"require\"?l.deps[r]=q(b):r===\"exports\"?(l.deps[r]=m[e]={},l.usingExports=!0):r===\"module\"?(l.cjsModule=i=l.deps[r]={id:k,uri:k?f.nameToUrl(k,null,d):void 0,exports:m[e]},i.setExports=x(i)):r in m&&!(r in F)?l.deps[r]=m[r]:j[r]||(l.depMax+=1,v(i),(t[r]||(t[r]=[])).push(l),j[r]=!0);l.depCount===l.depMax?w(l):(F[l.waitId]=l,I.push(l),f.waitCount+=1)}function u(b){z.apply(null,b);s[b[0]]=!0}function C(b,a){if(!b.isDone){var c=\nb.fullName,d=b.depArray,f,e;if(c){if(a[c])return m[c];a[c]=!0}for(e=0;e<d.length;e++)if((f=d[e])&&!b.deps[f]&&F[f])b.onDep(f,C(F[f],a));return c?m[c]:void 0}}function A(){var b=p.waitSeconds*1E3,a=b&&f.startTime+b<(new Date).getTime(),b=\"\",c=!1,g=!1,k;if(!(f.pausedCount>0)){if(p.priorityWait)if(e())G();else return;for(k in s)if(!(k in J)&&(c=!0,!s[k]))if(a)b+=k+\" \";else{g=!0;break}if(c||f.waitCount){if(a&&b)return k=R(\"timeout\",\"Load timeout for modules: \"+b),k.requireType=\"timeout\",k.requireModules=\nb,d.onError(k);if(g||f.scriptCount){if((B||ca)&&!X)X=setTimeout(function(){X=0;A()},50)}else{if(f.waitCount){for(H=0;b=I[H];H++)C(b,{});Y<5&&(Y+=1,A())}Y=0;d.checkReadyState()}}}}function D(b,a){var c=a.name,e=a.fullName,g;if(!(e in m||e in s))K[b]||(K[b]=m[b]),s[e]||(s[e]=!1),g=function(g){if(d.onPluginLoad)d.onPluginLoad(f,b,c,g);w({prefix:a.prefix,name:a.name,fullName:a.fullName,callback:function(){return g}});s[e]=!0},g.fromText=function(b,a){var c=N;f.loaded[b]=!1;f.scriptCount+=1;c&&(N=!1);\nd.exec(a);c&&(N=!0);f.completeLoad(b)},K[b].load(c,q(a.parentMap,!0),g,p)}function L(b){b.prefix&&b.name&&b.name.indexOf(\"__$p\")===0&&m[b.prefix]&&(b=g(b.originalName,b.parentMap));var a=b.prefix,c=b.fullName,e=f.urlFetched;!y[c]&&!s[c]&&(y[c]=!0,a?m[a]?D(a,b):(O[a]||(O[a]=[],(t[a]||(t[a]=[])).push({onDep:function(b){if(b===a){for(var c,d=O[a],b=0;b<d.length;b++)c=d[b],D(a,g(c.originalName,c.parentMap));delete O[a]}}})),O[a].push(b)):e[b.url]||(d.load(f,c,b.url),e[b.url]=!0))}var f,G,p={waitSeconds:7,\nbaseUrl:i.baseUrl||\"./\",paths:{},pkgs:{},catchError:{}},P=[],y={require:!0,exports:!0,module:!0},E={},m={},s={},F={},I=[],Q=0,t={},K={},O={},Z=0,S={};T=function(b){if(!f.jQuery&&(b=b||(typeof jQuery!==\"undefined\"?jQuery:null))&&!(p.jQuery&&b.fn.jquery!==p.jQuery)&&(\"holdReady\"in b||\"readyWait\"in b))if(f.jQuery=b,u([\"jquery\",[],function(){return jQuery}]),f.scriptCount)W(b,!0),f.jQueryIncremented=!0};G=function(){var b,a,c;Z+=1;if(f.scriptCount<=0)f.scriptCount=0;for(;P.length;)if(b=P.shift(),b[0]===\nnull)return d.onError(R(\"mismatch\",\"Mismatched anonymous define() module: \"+b[b.length-1]));else u(b);if(!p.priorityWait||e())for(;f.paused.length;){c=f.paused;f.pausedCount+=c.length;f.paused=[];for(a=0;b=c[a];a++)L(b);f.startTime=(new Date).getTime();f.pausedCount-=c.length}Z===1&&A();Z-=1};f={contextName:a,config:p,defQueue:P,waiting:F,waitCount:0,specified:y,loaded:s,urlMap:E,scriptCount:0,urlFetched:{},defined:m,paused:[],pausedCount:0,plugins:K,managerCallbacks:t,makeModuleMap:g,normalize:c,\nconfigure:function(b){var a,c,e;b.baseUrl&&b.baseUrl.charAt(b.baseUrl.length-1)!==\"/\"&&(b.baseUrl+=\"/\");a=p.paths;e=p.pkgs;V(p,b,!0);if(b.paths){for(c in b.paths)c in J||(a[c]=b.paths[c]);p.paths=a}if((a=b.packagePaths)||b.packages){if(a)for(c in a)c in J||aa(e,a[c],c);b.packages&&aa(e,b.packages);p.pkgs=e}if(b.priority)c=f.requireWait,f.requireWait=!1,f.takeGlobalQueue(),G(),f.require(b.priority),G(),f.requireWait=c,p.priorityWait=b.priority;if(b.deps||b.callback)f.require(b.deps||[],b.callback);\nb.ready&&d.ready(b.ready)},requireDefined:function(b,a){return g(b,a).fullName in m},requireSpecified:function(b,a){return g(b,a).fullName in y},require:function(b,c,e){if(typeof b===\"string\"){if(d.get)return d.get(f,b,c);c=g(b,c);b=c.fullName;return!(b in m)?d.onError(R(\"notloaded\",\"Module name '\"+c.fullName+\"' has not been loaded yet for context: \"+a)):m[b]}z(null,b,c,e);if(!f.requireWait)for(;!f.scriptCount&&f.paused.length;)f.takeGlobalQueue(),G();return f.require},takeGlobalQueue:function(){U.length&&\n(ka.apply(f.defQueue,[f.defQueue.length-1,0].concat(U)),U=[])},completeLoad:function(b){var a;for(f.takeGlobalQueue();P.length;)if(a=P.shift(),a[0]===null){a[0]=b;break}else if(a[0]===b)break;else u(a),a=null;a?u(a):u([b,[],b===\"jquery\"&&typeof jQuery!==\"undefined\"?function(){return jQuery}:null]);s[b]=!0;T();d.isAsync&&(f.scriptCount-=1);G();d.isAsync||(f.scriptCount-=1)},toUrl:function(b,a){var c=b.lastIndexOf(\".\"),d=null;c!==-1&&(d=b.substring(c,b.length),b=b.substring(0,c));return f.nameToUrl(b,\nd,a)},nameToUrl:function(b,a,e){var g,j,i,m,l=f.config,b=c(b,e&&e.fullName);if(d.jsExtRegExp.test(b))a=b+(a?a:\"\");else{g=l.paths;j=l.pkgs;e=b.split(\"/\");for(m=e.length;m>0;m--)if(i=e.slice(0,m).join(\"/\"),g[i]){e.splice(0,m,g[i]);break}else if(i=j[i]){b=b===i.name?i.location+\"/\"+i.main:i.location;e.splice(0,m,b);break}a=e.join(\"/\")+(a||\".js\");a=(a.charAt(0)===\"/\"||a.match(/^\\w+:/)?\"\":l.baseUrl)+a}return l.urlArgs?a+((a.indexOf(\"?\")===-1?\"?\":\"&\")+l.urlArgs):a}};f.jQueryCheck=T;f.resume=G;return f}function la(){var a,\nc,d;if(C&&C.readyState===\"interactive\")return C;a=document.getElementsByTagName(\"script\");for(c=a.length-1;c>-1&&(d=a[c]);c--)if(d.readyState===\"interactive\")return C=d;return null}var ma=/(\\/\\*([\\s\\S]*?)\\*\\/|\\/\\/(.*)$)/mg,na=/require\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,fa=/^\\.\\//,ba=/\\.js$/,$=Object.prototype.toString,q=Array.prototype,ia=q.slice,ka=q.splice,B=!!(typeof window!==\"undefined\"&&navigator&&document),ca=!B&&typeof importScripts!==\"undefined\",oa=B&&navigator.platform===\"PLAYSTATION 3\"?/^complete$/:\n/^(complete|loaded)$/,da=typeof opera!==\"undefined\"&&opera.toString()===\"[object Opera]\",ja=\"_r@@\",J={},z={},U=[],C=null,Y=0,N=!1,d,q={},I,i,u,L,v,A,D,H,Q,ea,w,T,X;if(typeof define===\"undefined\"){if(typeof requirejs!==\"undefined\")if(M(requirejs))return;else q=requirejs,requirejs=void 0;typeof require!==\"undefined\"&&!M(require)&&(q=require,require=void 0);d=requirejs=function(a,c,d){var e=\"_\",i;!E(a)&&typeof a!==\"string\"&&(i=a,E(c)?(a=c,c=d):a=[]);if(i&&i.context)e=i.context;d=z[e]||(z[e]=ga(e));i&&\nd.configure(i);return d.require(a,c)};d.config=function(a){return d(a)};typeof require===\"undefined\"&&(require=d);d.toUrl=function(a){return z._.toUrl(a)};d.version=\"0.26.0\";d.isArray=E;d.isFunction=M;d.mixin=V;d.jsExtRegExp=/^\\/|:|\\?|\\.js$/;i=d.s={contexts:z,skipAsync:{},isPageLoaded:!B,readyCalls:[]};if(d.isAsync=d.isBrowser=B)if(u=i.head=document.getElementsByTagName(\"head\")[0],L=document.getElementsByTagName(\"base\")[0])u=i.head=L.parentNode;d.onError=function(a){throw a;};d.load=function(a,c,\ng){var e=a.loaded;e[c]||(e[c]=!1);a.scriptCount+=1;d.attach(g,a,c);if(a.jQuery&&!a.jQueryIncremented)W(a.jQuery,!0),a.jQueryIncremented=!0};define=d.def=function(a,c,g){var e,i;typeof a!==\"string\"&&(g=c,c=a,a=null);d.isArray(c)||(g=c,c=[]);!a&&!c.length&&d.isFunction(g)&&g.length&&(g.toString().replace(ma,\"\").replace(na,function(a,d){c.push(d)}),c=(g.length===1?[\"require\"]:[\"require\",\"exports\",\"module\"]).concat(c));if(N&&(e=I||la()))a||(a=e.getAttribute(\"data-requiremodule\")),i=z[e.getAttribute(\"data-requirecontext\")];\n(i?i.defQueue:U).push([a,c,g])};define.amd={multiversion:!0,plugins:!0,jQuery:!0};d.exec=function(a){return eval(a)};d.execCb=function(a,c,d,e){return c.apply(e,d)};d.onScriptLoad=function(a){var c=a.currentTarget||a.srcElement,g;if(a.type===\"load\"||oa.test(c.readyState))C=null,a=c.getAttribute(\"data-requirecontext\"),g=c.getAttribute(\"data-requiremodule\"),z[a].completeLoad(g),c.detachEvent&&!da?c.detachEvent(\"onreadystatechange\",d.onScriptLoad):c.removeEventListener(\"load\",d.onScriptLoad,!1)};d.attach=\nfunction(a,c,g,e,q){var j;if(B)return e=e||d.onScriptLoad,j=c&&c.config&&c.config.xhtml?document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"html:script\"):document.createElement(\"script\"),j.type=q||\"text/javascript\",j.charset=\"utf-8\",j.async=!i.skipAsync[a],c&&j.setAttribute(\"data-requirecontext\",c.contextName),j.setAttribute(\"data-requiremodule\",g),j.attachEvent&&!da?(N=!0,j.attachEvent(\"onreadystatechange\",e)):j.addEventListener(\"load\",e,!1),j.src=a,I=j,L?u.insertBefore(j,L):u.appendChild(j),\nI=null,j;else if(ca)e=c.loaded,e[g]=!1,importScripts(a),c.completeLoad(g);return null};if(B){v=document.getElementsByTagName(\"script\");for(H=v.length-1;H>-1&&(A=v[H]);H--){if(!u)u=A.parentNode;if(D=A.getAttribute(\"data-main\")){if(!q.baseUrl)v=D.split(\"/\"),A=v.pop(),v=v.length?v.join(\"/\")+\"/\":\"./\",q.baseUrl=v,D=A.replace(ba,\"\");q.deps=q.deps?q.deps.concat(D):[D];break}}}i.baseUrl=q.baseUrl;d.pageLoaded=function(){if(!i.isPageLoaded){i.isPageLoaded=!0;Q&&clearInterval(Q);if(ea)document.readyState=\"complete\";\nd.callReady()}};d.checkReadyState=function(){var a=i.contexts,c;for(c in a)if(!(c in J)&&a[c].waitCount)return;i.isDone=!0;d.callReady()};d.callReady=function(){var a=i.readyCalls,c,d,e;if(i.isPageLoaded&&i.isDone){if(a.length){i.readyCalls=[];for(c=0;d=a[c];c++)d()}a=i.contexts;for(e in a)if(!(e in J)&&(c=a[e],c.jQueryIncremented))W(c.jQuery,!1),c.jQueryIncremented=!1}};d.ready=function(a){i.isPageLoaded&&i.isDone?a():i.readyCalls.push(a);return d};if(B){if(document.addEventListener){if(document.addEventListener(\"DOMContentLoaded\",\nd.pageLoaded,!1),window.addEventListener(\"load\",d.pageLoaded,!1),!document.readyState)ea=!0,document.readyState=\"loading\"}else window.attachEvent&&(window.attachEvent(\"onload\",d.pageLoaded),self===self.top&&(Q=setInterval(function(){try{document.body&&(document.documentElement.doScroll(\"left\"),d.pageLoaded())}catch(a){}},30)));document.readyState===\"complete\"&&d.pageLoaded()}d(q);if(d.isAsync&&typeof setTimeout!==\"undefined\")w=i.contexts[q.context||\"_\"],w.requireWait=!0,setTimeout(function(){w.requireWait=\n!1;w.takeGlobalQueue();w.jQueryCheck();w.scriptCount||w.resume();d.checkReadyState()},0)}})();\n","/home/travis/build/npmtest/node-npmtest-follow/node_modules/follow/browser/util.js":"define([], function() {\n  var exports = {};\n\n  exports.inspect = JSON.stringify;\n\n  // Copy from Node\n  /**\n   * Inherit the prototype methods from one constructor into another.\n   *\n   * The Function.prototype.inherits from lang.js rewritten as a standalone\n   * function (not on Function.prototype). NOTE: If this file is to be loaded\n   * during bootstrapping this function needs to be revritten using some native\n   * functions as prototype setup using normal JavaScript does not work as\n   * expected during bootstrapping (see mirror.js in r114903).\n   *\n   * @param {function} ctor Constructor function which needs to inherit the\n   *     prototype.\n   * @param {function} superCtor Constructor function to inherit prototype from.\n   */\n  exports.inherits = function(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: { value: ctor, enumerable: false }\n    });\n  };\n\n  return exports;\n})\n"}